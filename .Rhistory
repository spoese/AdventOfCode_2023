x <- test$Codes[1]
x
case_when(
str_sub(x, end = 3) == "one" ~ paste0("1",str_sub(x, start = 4)),
str_sub(x, end = 3) == "two" ~ paste0("2",str_sub(x, start = 4)),
str_sub(x, end = 5) == "three" ~ paste0("3",str_sub(x, start = 6)),
str_sub(x, end = 4) == "four" ~ paste0("4",str_sub(x, start = 5)),
str_sub(x, end = 4) == "five" ~ paste0("5",str_sub(x, start = 5)),
str_sub(x, end = 3) == "six" ~ paste0("6",str_sub(x, start = 4)),
str_sub(x, end = 5) == "seven" ~ paste0("7",str_sub(x, start = 6)),
str_sub(x, end = 5) == "eight" ~ paste0("8",str_sub(x, start = 6)),
str_sub(x, end = 4) == "nine" ~ paste0("9",str_sub(x, start = 5)),
TRUE ~ x
)
test <- tibble(Codes = c("two1nine", "eightwothree", "abcone2threexyz",
"xtwone3four", "4nineeightseven2", "zoneight234",
"7pqrstsixteen")) |>
mutate(First = str_extract(Codes, "[:Digit:]"),
Last = str_extract(stri_reverse(Codes), "[:Digit:]"),
Total = as.integer(paste0(First,Last))) |>
check_digit <- function(x) {
case_when(
str_sub(x, end = 3) == "one" ~ paste0("1",str_sub(x, start = 4)),
str_sub(x, end = 3) == "two" ~ paste0("2",str_sub(x, start = 4)),
str_sub(x, end = 5) == "three" ~ paste0("3",str_sub(x, start = 6)),
str_sub(x, end = 4) == "four" ~ paste0("4",str_sub(x, start = 5)),
str_sub(x, end = 4) == "five" ~ paste0("5",str_sub(x, start = 5)),
str_sub(x, end = 3) == "six" ~ paste0("6",str_sub(x, start = 4)),
str_sub(x, end = 5) == "seven" ~ paste0("7",str_sub(x, start = 6)),
str_sub(x, end = 5) == "eight" ~ paste0("8",str_sub(x, start = 6)),
str_sub(x, end = 4) == "nine" ~ paste0("9",str_sub(x, start = 5)),
TRUE ~ x
)
}
case_when(
str_sub(x, end = 3) == "one" ~ paste0("1",str_sub(x, start = 4)),
str_sub(x, end = 3) == "two" ~ paste0("2",str_sub(x, start = 4)),
str_sub(x, end = 5) == "three" ~ paste0("3",str_sub(x, start = 6)),
str_sub(x, end = 4) == "four" ~ paste0("4",str_sub(x, start = 5)),
str_sub(x, end = 4) == "five" ~ paste0("5",str_sub(x, start = 5)),
str_sub(x, end = 3) == "six" ~ paste0("6",str_sub(x, start = 4)),
str_sub(x, end = 5) == "seven" ~ paste0("7",str_sub(x, start = 6)),
str_sub(x, end = 5) == "eight" ~ paste0("8",str_sub(x, start = 6)),
str_sub(x, end = 4) == "nine" ~ paste0("9",str_sub(x, start = 5))
)
test <- tibble(Codes = c("two1nine", "eightwothree", "abcone2threexyz",
"xtwone3four", "4nineeightseven2", "zoneight234",
"7pqrstsixteen")) |>
mutate(First = str_extract(Codes, "[:Digit:]"),
Last = str_extract(stri_reverse(Codes), "[:Digit:]"),
Total = as.integer(paste0(First,Last))) |>
check_digit <- function(x) {
case_when(
str_sub(x, end = 3) == "one" ~ paste0("1",str_sub(x, start = 4)),
str_sub(x, end = 3) == "two" ~ paste0("2",str_sub(x, start = 4)),
str_sub(x, end = 5) == "three" ~ paste0("3",str_sub(x, start = 6)),
str_sub(x, end = 4) == "four" ~ paste0("4",str_sub(x, start = 5)),
str_sub(x, end = 4) == "five" ~ paste0("5",str_sub(x, start = 5)),
str_sub(x, end = 3) == "six" ~ paste0("6",str_sub(x, start = 4)),
str_sub(x, end = 5) == "seven" ~ paste0("7",str_sub(x, start = 6)),
str_sub(x, end = 5) == "eight" ~ paste0("8",str_sub(x, start = 6)),
str_sub(x, end = 4) == "nine" ~ paste0("9",str_sub(x, start = 5))
)
}
test <- tibble(Codes = c("two1nine", "eightwothree", "abcone2threexyz",
"xtwone3four", "4nineeightseven2", "zoneight234",
"7pqrstsixteen")) |>
mutate(First = str_extract(Codes, "[:Digit:]"),
Last = str_extract(stri_reverse(Codes), "[:Digit:]"),
Total = as.integer(paste0(First,Last))) |>
check_digit <- function(x) {
output <- case_when(
str_sub(x, end = 3) == "one" ~ paste0("1",str_sub(x, start = 4)),
str_sub(x, end = 3) == "two" ~ paste0("2",str_sub(x, start = 4)),
str_sub(x, end = 5) == "three" ~ paste0("3",str_sub(x, start = 6)),
str_sub(x, end = 4) == "four" ~ paste0("4",str_sub(x, start = 5)),
str_sub(x, end = 4) == "five" ~ paste0("5",str_sub(x, start = 5)),
str_sub(x, end = 3) == "six" ~ paste0("6",str_sub(x, start = 4)),
str_sub(x, end = 5) == "seven" ~ paste0("7",str_sub(x, start = 6)),
str_sub(x, end = 5) == "eight" ~ paste0("8",str_sub(x, start = 6)),
str_sub(x, end = 4) == "nine" ~ paste0("9",str_sub(x, start = 5)),
TRUE ~ x
)
}
output <- case_when(
str_sub(x, end = 3) == "one" ~ paste0("1",str_sub(x, start = 4)),
str_sub(x, end = 3) == "two" ~ paste0("2",str_sub(x, start = 4)),
str_sub(x, end = 5) == "three" ~ paste0("3",str_sub(x, start = 6)),
str_sub(x, end = 4) == "four" ~ paste0("4",str_sub(x, start = 5)),
str_sub(x, end = 4) == "five" ~ paste0("5",str_sub(x, start = 5)),
str_sub(x, end = 3) == "six" ~ paste0("6",str_sub(x, start = 4)),
str_sub(x, end = 5) == "seven" ~ paste0("7",str_sub(x, start = 6)),
str_sub(x, end = 5) == "eight" ~ paste0("8",str_sub(x, start = 6)),
str_sub(x, end = 4) == "nine" ~ paste0("9",str_sub(x, start = 5)),
TRUE ~ x
)
output
test
x <- "423"
output <- case_when(
str_sub(x, end = 3) == "one" ~ paste0("1",str_sub(x, start = 4)),
str_sub(x, end = 3) == "two" ~ paste0("2",str_sub(x, start = 4)),
str_sub(x, end = 5) == "three" ~ paste0("3",str_sub(x, start = 6)),
str_sub(x, end = 4) == "four" ~ paste0("4",str_sub(x, start = 5)),
str_sub(x, end = 4) == "five" ~ paste0("5",str_sub(x, start = 5)),
str_sub(x, end = 3) == "six" ~ paste0("6",str_sub(x, start = 4)),
str_sub(x, end = 5) == "seven" ~ paste0("7",str_sub(x, start = 6)),
str_sub(x, end = 5) == "eight" ~ paste0("8",str_sub(x, start = 6)),
str_sub(x, end = 4) == "nine" ~ paste0("9",str_sub(x, start = 5)),
TRUE ~ x
)
output
test <- tibble(Codes = c("two1nine", "eightwothree", "abcone2threexyz",
"xtwone3four", "4nineeightseven2", "zoneight234",
"7pqrstsixteen")) |>
mutate(First = str_extract(Codes, "[:Digit:]"),
Last = str_extract(stri_reverse(Codes), "[:Digit:]"),
Total = as.integer(paste0(First,Last))) |>
check_digit <- function(x) {
case_when(
str_sub(x, end = 3) == "one" ~ paste0("1",str_sub(x, start = 4)),
str_sub(x, end = 3) == "two" ~ paste0("2",str_sub(x, start = 4)),
str_sub(x, end = 5) == "three" ~ paste0("3",str_sub(x, start = 6)),
str_sub(x, end = 4) == "four" ~ paste0("4",str_sub(x, start = 5)),
str_sub(x, end = 4) == "five" ~ paste0("5",str_sub(x, start = 5)),
str_sub(x, end = 3) == "six" ~ paste0("6",str_sub(x, start = 4)),
str_sub(x, end = 5) == "seven" ~ paste0("7",str_sub(x, start = 6)),
str_sub(x, end = 5) == "eight" ~ paste0("8",str_sub(x, start = 6)),
str_sub(x, end = 4) == "nine" ~ paste0("9",str_sub(x, start = 5)),
TRUE ~ x
)
}
check_digit <- function(x) {
case_when(
str_sub(x, end = 3) == "one" ~ paste0("1",str_sub(x, start = 4)),
str_sub(x, end = 3) == "two" ~ paste0("2",str_sub(x, start = 4)),
str_sub(x, end = 5) == "three" ~ paste0("3",str_sub(x, start = 6)),
str_sub(x, end = 4) == "four" ~ paste0("4",str_sub(x, start = 5)),
str_sub(x, end = 4) == "five" ~ paste0("5",str_sub(x, start = 5)),
str_sub(x, end = 3) == "six" ~ paste0("6",str_sub(x, start = 4)),
str_sub(x, end = 5) == "seven" ~ paste0("7",str_sub(x, start = 6)),
str_sub(x, end = 5) == "eight" ~ paste0("8",str_sub(x, start = 6)),
str_sub(x, end = 4) == "nine" ~ paste0("9",str_sub(x, start = 5)),
TRUE ~ x
)
}
test |>
mutate(Mod_Codes = check_digit(Codes))
check_digit <- function(x) {
for (i in 1:str_length(x)-2){
y <- str_sub(x, start = i)
x <- case_when(
str_sub(y, end = 3) == "one" ~ paste0("  1",str_sub(y, start = 4)),
str_sub(y, end = 3) == "two" ~ paste0("  2",str_sub(y, start = 4)),
str_sub(y, end = 5) == "three" ~ paste0("    3",str_sub(y, start = 6)),
str_sub(y, end = 4) == "four" ~ paste0("   4",str_sub(y, start = 5)),
str_sub(y, end = 4) == "five" ~ paste0("   5",str_sub(y, start = 5)),
str_sub(y, end = 3) == "six" ~ paste0("  6",str_sub(y, start = 4)),
str_sub(y, end = 5) == "seven" ~ paste0("    7",str_sub(y, start = 6)),
str_sub(y, end = 5) == "eight" ~ paste0("    8",str_sub(y, start = 6)),
str_sub(y, end = 4) == "nine" ~ paste0("   9",str_sub(y, start = 5)),
TRUE ~ y
)
}
str_replace_all(x, " ", "")
}
test |>
mutate(Mod_Codes = check_digit(Codes))
check_digit(test$Codes[1])
x
str_sub(x, end = 0)
str_sub(x, end = 1)
check_digit <- function(x) {
for (i in 1:str_length(x)-2){
y <- str_sub(x, start = i)
x <- case_when(
str_sub(y, end = 3) == "one" ~ paste0(str_sub(x, end = i-1),
"  1",
str_sub(y, start = 4)),
str_sub(y, end = 3) == "two" ~ paste0(str_sub(x, end = i-1),
"  2",
str_sub(y, start = 4)),
str_sub(y, end = 5) == "three" ~ paste0(str_sub(x, end = i-1),
"    3",
str_sub(y, start = 6)),
str_sub(y, end = 4) == "four" ~ paste0(str_sub(x, end = i-1),
"   4",
str_sub(y, start = 5)),
str_sub(y, end = 4) == "five" ~ paste0(str_sub(x, end = i-1),
"   5",
str_sub(y, start = 5)),
str_sub(y, end = 3) == "six" ~ paste0(str_sub(x, end = i-1),
"  6",
str_sub(y, start = 4)),
str_sub(y, end = 5) == "seven" ~ paste0(str_sub(x, end = i-1),
"    7",
str_sub(y, start = 6)),
str_sub(y, end = 5) == "eight" ~ paste0(str_sub(x, end = i-1),
"    8",
str_sub(y, start = 6)),
str_sub(y, end = 4) == "nine" ~ paste0(str_sub(x, end = i-1),
"   9",
str_sub(y, start = 5)),
TRUE ~ y
)
}
str_replace_all(x, " ", "")
}
test |>
mutate(Mod_Codes = check_digit(Codes))
check_digit <- function(x) {
for (i in 1:str_length(x)-2){
y <- str_sub(x, start = i)
x <- case_when(
str_sub(y, end = 3) == "one" ~ paste0(str_sub(x, end = i-1),
"  1",
str_sub(y, start = 4)),
str_sub(y, end = 3) == "two" ~ paste0(str_sub(x, end = i-1),
"  2",
str_sub(y, start = 4)),
str_sub(y, end = 5) == "three" ~ paste0(str_sub(x, end = i-1),
"    3",
str_sub(y, start = 6)),
str_sub(y, end = 4) == "four" ~ paste0(str_sub(x, end = i-1),
"   4",
str_sub(y, start = 5)),
str_sub(y, end = 4) == "five" ~ paste0(str_sub(x, end = i-1),
"   5",
str_sub(y, start = 5)),
str_sub(y, end = 3) == "six" ~ paste0(str_sub(x, end = i-1),
"  6",
str_sub(y, start = 4)),
str_sub(y, end = 5) == "seven" ~ paste0(str_sub(x, end = i-1),
"    7",
str_sub(y, start = 6)),
str_sub(y, end = 5) == "eight" ~ paste0(str_sub(x, end = i-1),
"    8",
str_sub(y, start = 6)),
str_sub(y, end = 4) == "nine" ~ paste0(str_sub(x, end = i-1),
"   9",
str_sub(y, start = 5)),
TRUE ~ paste0(str_sub(x, end = i-1),y)
)
}
str_replace_all(x, " ", "")
}
test |>
mutate(Mod_Codes = check_digit(Codes))
debug(check_digit)
debug(check_digit)
?debug
debug(check_digit)
check_digit(test$Codes[4])
y
x
y
x
y
x
check_digit(test$Codes[4])
x
y
ls(x)
rm(x)
check_digit(test$Codes[4])
x
y
x
y
x
y
y
i
check_digit <- function(x) {
for (i in 1:(str_length(x)-2)){
y <- str_sub(x, start = i)
x <- case_when(
str_sub(y, end = 3) == "one" ~ paste0(str_sub(x, end = i-1),
"  1",
str_sub(y, start = 4)),
str_sub(y, end = 3) == "two" ~ paste0(str_sub(x, end = i-1),
"  2",
str_sub(y, start = 4)),
str_sub(y, end = 5) == "three" ~ paste0(str_sub(x, end = i-1),
"    3",
str_sub(y, start = 6)),
str_sub(y, end = 4) == "four" ~ paste0(str_sub(x, end = i-1),
"   4",
str_sub(y, start = 5)),
str_sub(y, end = 4) == "five" ~ paste0(str_sub(x, end = i-1),
"   5",
str_sub(y, start = 5)),
str_sub(y, end = 3) == "six" ~ paste0(str_sub(x, end = i-1),
"  6",
str_sub(y, start = 4)),
str_sub(y, end = 5) == "seven" ~ paste0(str_sub(x, end = i-1),
"    7",
str_sub(y, start = 6)),
str_sub(y, end = 5) == "eight" ~ paste0(str_sub(x, end = i-1),
"    8",
str_sub(y, start = 6)),
str_sub(y, end = 4) == "nine" ~ paste0(str_sub(x, end = i-1),
"   9",
str_sub(y, start = 5)),
TRUE ~ paste0(str_sub(x, end = i-1),y)
)
}
str_replace_all(x, " ", "")
}
check_digit(test$Codes[4])
test |>
mutate(Mod_Codes = check_digit(Codes))
test |>
rowwise() |>
mutate(Mod_Codes = check_digit(Codes))
part1 |>
rowwise() |>
mutate(Mod_Codes = check_digit(Codes))
grep("twone", part1$Codes)
part1$Codes[53]
part2 <- part1 |>
rowwise() |>
mutate(Mod_Codes = check_digit(Codes))
part2[grep("twoone", part2$Codes),]
part2[grep("twone", part2$Codes),]
part2 |>
mutate(Mod_First = str_extract(Mod_Codes, "[:Digit:]"),
Mod_Last = str_extract(stri_reverse(Mod_Codes), "[:Digit:]"),
Mod_Total = as.integer(paste0(Mod_First,Mod_Last))))
part2 |>
mutate(Mod_First = str_extract(Mod_Codes, "[:Digit:]"),
Mod_Last = str_extract(stri_reverse(Mod_Codes), "[:Digit:]"),
Mod_Total = as.integer(paste0(Mod_First,Mod_Last)))
part2 <- part2 |>
mutate(Mod_First = str_extract(Mod_Codes, "[:Digit:]"),
Mod_Last = str_extract(stri_reverse(Mod_Codes), "[:Digit:]"),
Mod_Total = as.integer(paste0(Mod_First,Mod_Last)))
sum(part2$Mod_Total)
part2
filter(part2, is.na(Mod_Total))
sample(part2, 10)
?sample
part2[sample(1:1000, 10),]
test
test |>
rowwise() |>
mutate(Mod_Codes = check_digit(Codes))
test |>
rowwise() |>
mutate(Mod_Codes = check_digit(Codes),
Mod_First = str_extract(Mod_Codes, "[:Digit:]"),
Mod_Last = str_extract(stri_reverse(Mod_Codes), "[:Digit:]"),
Mod_Total = as.integer(paste0(Mod_First,Mod_Last)))
sum(.Last.value$Mod_Total)
part2 <- lines |>
rowwise() |>
mutate(Mod_Codes = check_digit(Codes),
Mod_First = str_extract(Mod_Codes, "[:Digit:]"),
Mod_Last = str_extract(stri_reverse(Mod_Codes), "[:Digit:]"),
Mod_Total = as.integer(paste0(Mod_First,Mod_Last)))
sum(part2$Mod_Total)
#Part 2 Try 2
part1
#Part 2 Try 2
lines
grep("seven", "29lzrxseven")
?substr
test
substr(test$Codes[1], start = 4, end = 5)
substr(test$Codes[1], start = 4, stop = 5)
str_locate_all(test$Codes[1], "nine")
?str_locate_all
str_locate_all(test$Codes[1], c("two", "nine"))
str_locate_all(test$Codes[1], c("one", "two"))
str_locate_all(test$Codes[1], c("one", "two"))[[1]]
str_locate_all(test$Codes[1], c("one", "two"))[[1]] |> tibble()
str_locate_all(x, c("one", "two", "three", "four", "five",
"six", "seven", "eight", "nine", "[:Digits:]"))
#Part 2 Try 2
find_digits <- function(x) {
str_locate_all(x, c("one", "two", "three", "four", "five",
"six", "seven", "eight", "nine", "[:Digits:]"))
}
find_digits(test$Codes[1])
str_locate_all(x, c("one", "two", "three", "four", "five",
"six", "seven", "eight", "nine", 1:9))
#Part 2 Try 2
find_digits <- function(x) {
str_locate_all(x, c("one", "two", "three", "four", "five",
"six", "seven", "eight", "nine", 1:9))
}
#Part 2 Try 2
find_digits <- function(x) {
str_locate_all(x, c("one", "two", "three", "four", "five",
"six", "seven", "eight", "nine", 1:9))
}
find_digits(test$Codes[1])
test$Codes[1]
?lapply
#Part 2 Try 2
find_digits <- function(x) {
locations <- str_locate_all(x, c("one", "two", "three", "four", "five",
"six", "seven", "eight", "nine", 1:9))
lapply(locations, tibble(x = 1:18, start = start, end = end))
}
find_digits(test$Codes[1])
#Part 2 Try 2
find_digits <- function(x) {
locations <- str_locate_all(x, c("one", "two", "three", "four", "five",
"six", "seven", "eight", "nine", 1:9))
sapply(locations, bind_rows)
}
find_digits(test$Codes[1])
#Part 2 Try 2
find_digits <- function(x) {
locations <- str_locate_all(x, c("one", "two", "three", "four", "five",
"six", "seven", "eight", "nine", 1:9))
sapply(locations, function(x){bind_rows(tibble(x))})
}
find_digits(test$Codes[1])
#Part 2 Try 2
find_digits <- function(x) {
locations <- str_locate_all(x, c("one", "two", "three", "four", "five",
"six", "seven", "eight", "nine", 1:9))
sapply(locations, tibble(x))
}
find_digits(test$Codes[1])
sapply(locations, tibble)
#Part 2 Try 2
find_digits <- function(x) {
locations <- str_locate_all(x, c("one", "two", "three", "four", "five",
"six", "seven", "eight", "nine", 1:9))
sapply(locations, tibble)
}
find_digits(test$Codes[1])
#Part 2 Try 2
find_digits <- function(x) {
locations <- str_locate_all(x, c("one", "two", "three", "four", "five",
"six", "seven", "eight", "nine", 1:9))
sapply(locations, tibble) |>
collapse()
}
find_digits(test$Codes[1])
test |>
rowwise() |>
mutate(Mod_Codes = check_digit(Codes),
Reverse_Mod_Codes = check_digit(stri_reverse(Codes)),
Mod_First = str_extract(Mod_Codes, "[:Digit:]"),
Mod_Last = str_extract(Reverse_Mod_Codes, "[:Digit:]"),
Mod_Total = as.integer(paste0(Mod_First,Mod_Last)))
rev_check_digit <- function(x) {
for (i in 1:(str_length(x)-2)){
y <- str_sub(x, start = i)
x <- case_when(
str_sub(y, end = 3) == "eno" ~ paste0(str_sub(x, end = i-1),
"  1",
str_sub(y, start = 4)),
str_sub(y, end = 3) == "owt" ~ paste0(str_sub(x, end = i-1),
"  2",
str_sub(y, start = 4)),
str_sub(y, end = 5) == "eerht" ~ paste0(str_sub(x, end = i-1),
"    3",
str_sub(y, start = 6)),
str_sub(y, end = 4) == "ruof" ~ paste0(str_sub(x, end = i-1),
"   4",
str_sub(y, start = 5)),
str_sub(y, end = 4) == "evif" ~ paste0(str_sub(x, end = i-1),
"   5",
str_sub(y, start = 5)),
str_sub(y, end = 3) == "xis" ~ paste0(str_sub(x, end = i-1),
"  6",
str_sub(y, start = 4)),
str_sub(y, end = 5) == "neves" ~ paste0(str_sub(x, end = i-1),
"    7",
str_sub(y, start = 6)),
str_sub(y, end = 5) == "thgie" ~ paste0(str_sub(x, end = i-1),
"    8",
str_sub(y, start = 6)),
str_sub(y, end = 4) == "enin" ~ paste0(str_sub(x, end = i-1),
"   9",
str_sub(y, start = 5)),
TRUE ~ paste0(str_sub(x, end = i-1),y)
)
}
str_replace_all(x, " ", "")
}
test |>
rowwise() |>
mutate(Mod_Codes = check_digit(Codes),
Reverse_Mod_Codes = rev_check_digit(stri_reverse(Codes)),
Mod_First = str_extract(Mod_Codes, "[:Digit:]"),
Mod_Last = str_extract(Reverse_Mod_Codes, "[:Digit:]"),
Mod_Total = as.integer(paste0(Mod_First,Mod_Last)))
part2 <- lines |>
rowwise() |>
mutate(Mod_Codes = check_digit(Codes),
Reverse_Mod_Codes = rev_check_digit(stri_reverse(Codes)),
Mod_First = str_extract(Mod_Codes, "[:Digit:]"),
Mod_Last = str_extract(Reverse_Mod_Codes, "[:Digit:]"),
Mod_Total = as.integer(paste0(Mod_First,Mod_Last)))
sum(part2$Mod_Total)
setwd("C:/Users/spoese/Documents/R/AdventOfCode_2023/Day 2")
library(tidyverse)
games <- readxl::read_excel("Day2.xlsx")
games
games <- readxl::read_excel("Day2.xlsx", col_names = FALSE)
games
games <- readxl::read_excel("Day2.xlsx", col_names = FALSE) |>
rename("Games" = "...1")
games
gitcreds::gitcreds_set("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")
gitcreds::gitcreds_set()
