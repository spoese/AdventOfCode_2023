Max_Dest = Dest + Length - 1,
Operation = Dest - Source) |>
select(Dest, Source, Length, Max_Dest, Max_Source, Operation)
}
map_list <- map(list(seed_soil_backup, soil_fertilizer_backup,
fertilizer_water_backup, water_light_backup,
light_temperature_backup, temperature_humidity_backup,
humidity_location_backup), create_db)
get_location <- function(input) {
for (j in 1:7) {
for (i in 1:length(map_list[[j]]$Source)) {
if (input >= map_list[[j]]$Source[i] &
input <= map_list[[j]]$Max_Source[i]) {
input <- input + map_list[[j]]$Operation[i]
break
}
}
}
input
}
map_dbl(seeds, get_location) |>
min()
location_back <- function(output) {
output <- output - map_list[[7]]$Operation[7]
for (j in 6:1) {
for (i in 1:length(map_list[[j]]$Source)) {
if (output >= map_list[[j]]$Dest[[i]] & output <= map_list[[j]]$Max_Dest[i]) {
output <- output - map_list[[j]]$Operation[i]
break
}
}
}
}
map_list[[7]]
first_attempt <- 0:1928058
first_attempt
1928058/10000
192/60
192*2.7
518.4/60
location_back <- function(output) {
output <- output - map_list[[7]]$Operation[7]
for (j in 6:1) {
for (i in 1:length(map_list[[j]]$Source)) {
if (output >= map_list[[j]]$Dest[[i]] & output <= map_list[[j]]$Max_Dest[i]) {
output <- output - map_list[[j]]$Operation[i]
break
}
}
}
output
}
location_back(0)
location_back <- function(output) {
output <- output - map_list[[7]]$Operation[7]
for (j in 7:1) {
for (i in 1:length(map_list[[j]]$Source)) {
if (output >= map_list[[j]]$Dest[[i]] & output <= map_list[[j]]$Max_Dest[i]) {
output <- output - map_list[[j]]$Operation[i]
break
}
}
}
output
}
location_back(0)
get_location(.Last.value)
location_back <- function(output) {
for (j in 7:1) {
for (i in 1:length(map_list[[j]]$Source)) {
if (output >= map_list[[j]]$Dest[[i]] & output <= map_list[[j]]$Max_Dest[i]) {
output <- output - map_list[[j]]$Operation[i]
break
}
}
}
output
}
location_back(0)
get_location(.Last.value)
seeds
seed_map
seed_map <- tibble(Starts = seeds[seq(1, 19, by = 2)],
Lengths = seeds[seq(2, 20, by = 2)])
seed_map
seed_map <- tibble(Starts = seeds[seq(1, 19, by = 2)],
Lengths = seeds[seq(2, 20, by = 2)]) |>
mutate(Ends = Starts + Lengths)
seed_map
seed_map <- tibble(Starts = seeds[seq(1, 19, by = 2)],
Lengths = seeds[seq(2, 20, by = 2)]) |>
mutate(Ends = Starts + Lengths - 1)
end <- TRUE
for(l in 0:10) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
break
}
}
answer
for(l in 0:10) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print("Solution found!")
break
}
}
end <- FALSE
for(l in 0:10) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0(c("Solution found on iteration ", l)))
break
}
}
end <- TRUE
for(l in 0:10) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0(c("Solution found on iteration ", l)))
break
}
}
for(l in 0:10) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
end <- FALSE
for(l in 0:100) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
end <- FALSE
for(l in 165788810:165788812) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
get_location(seeds[1])
end <- FALSE
for(l in 2236580068:2236580070) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
end <- FALSE
for(l in 2236580069:2236580070) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
end <- FALSE
for(l in 2236580035:2236580070) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
end <- FALSE
for(l in 223658:2236580070) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
end <- FALSE
for(l in 0:100) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
tictoc::tic()
end <- FALSE
for(l in 0:100) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
tictoc::toc()
tictoc::tic()
end <- FALSE
for(l in 0:1000) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
tictoc::toc()
tictoc::tic()
end <- FALSE
for(l in 0:10000) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
tictoc::toc()
end <- FALSE
for(l in 0:100000) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
tictoc::tic()
end <- FALSE
for(l in 0:1000000) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
tictoc::tic()
end <- FALSE
for(l in 100001:1000000) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
tictoc::toc()
165788812/1000000
.Last.value*322.85
.Last.value/60/60
map_list[[6]]
map_list[[6]] |> arrange(Dest)
1928057+1261955430
1261955430-927033968
1263883487-927033968
map_list[[5]]
map_list[[5]] |> arrange(Dest)
map_list[[4]] |> arrange(Dest)
map_list[[3]] |> arrange(Dest)
334921462-213721922
336849519-213721922
map_list[[2]] |> arrange(Dest)
map_list[[1]] |> arrange(Dest)
seed_map
seed_map |> arrange(Starts)
map_list[[7]] |> arrange(Dest)
1928058+202137001
220731593+202137001
map_list[[6]] |> arrange(Dest)
c(204065059,280992947)+1597713661
c(280992948,285710237)+593344394
c(285710238,422868594)-285710238
map_list[[5]] |> arrange(Dest)
map_list[[4]] |> arrange(Dest)
map_list[[4]] |> arrange(Dest) |> View()
map_list[[3]] |> arrange(Dest) |> View()
map_list[[2]] |> arrange(Dest) |> View()
usethis::create_from_github("https://github.com/spoese/20_Webb.git",
destdir = "I:/MKE/OPIRDATA/SPOESE/Data Requests/2023")
map_list[[7]] |> arrange(Dest)
install.packages("intervals")
library(intervals)
?Intervals
map_list[[7]]
map_list[[7]] |> arrange(Dest)
x
x <- Intervals(matrix(
c(0, 1928057,
1928058, 220731593,
220731594, 320856206,
320856207, 761939124),
byrow = TRUE, ncol = 2), closed = c(TRUE, TRUE), type = "Z")
x
interval_maps <- map_list |>
mutate(intervals = list(Intervals(cbind(Source, Max_Source))))
interval_maps <- map_list[[1]] |>
mutate(intervals = list(Intervals(cbind(Source, Max_Source))))
interval_maps
Intervals(cbind(map_list[[1]]$Source, map_list[[1]]$Max_Source))
??crossing
?tidyr::crossing
setwd("~/R/AdventOfCode_2023/Day 3")
library(tidyverse)
engine_backup <- readxl::read_excel("Data.xlsx", col_names = FALSE) |>
rename("Data" = "...1") |>
pull(Data)
test_backup <- c("467..114..",
"...*......",
"..35..633.",
"......#...",
"617*......",
".....+.58.",
"..592.....",
"......755.",
"...$.*....",
".664.598..")
local_backup <- engine_backup
#Part 1
part_numbers <- NULL
for (row in 2:139) {
symbol_locs <- unlist(gregexpr('[^0-9.]', local_backup[row]))
if (symbol_locs[1] != -1) {
for (i in symbol_locs) {
#Start with in-row observations
prev_num <- str_sub(local_backup[row], end = i-1) |>
str_extract("\\d+$")
if (!is.na(prev_num)) {
part_numbers <- c(part_numbers, prev_num)
prev_length <- str_length(prev_num)
local_backup[row] <- paste0(str_sub(local_backup[row], end = i-prev_length-1),
paste(rep(".", prev_length), collapse = ""),
str_sub(local_backup[row], start = i))
}
next_num <- str_sub(local_backup[row], start = i+1) |>
str_extract("^\\d+")
if (!is.na(next_num)) {
part_numbers <- c(part_numbers, next_num)
next_length <- str_length(next_num)
local_backup[row] <- paste0(str_sub(local_backup[row], end = i),
paste(rep(".", next_length), collapse = ""),
str_sub(local_backup[row], start = i+next_length+1))
}
#Move to previous row observations
for (j in 1:5) {
test <- str_sub(local_backup[row-1], start = i+2-j, end = i+4-j)
if (grepl("[0-9]{3}", test)) {
part_numbers <- c(part_numbers, test)
local_backup[row-1] <- paste0(str_sub(local_backup[row-1], end = i+1-j),
paste(rep(".", 3), collapse = ""),
str_sub(local_backup[row-1], start = i+5-j))
}
}
for (k in 1:4) {
test <- str_sub(local_backup[row-1], start = i+2-k, end = i+3-k)
if (grepl("[0-9]{2}", test)) {
part_numbers <- c(part_numbers, test)
local_backup[row-1] <- paste0(str_sub(local_backup[row-1], end = i+1-k),
paste(rep(".", 2), collapse = ""),
str_sub(local_backup[row-1], start = i+4-k))
}
}
for (l in 1:3) {
test <- str_sub(local_backup[row-1], start = i+2-l, end = i+2-l)
if (grepl("[0-9]{1}", test)) {
part_numbers <- c(part_numbers, test)
local_backup[row-1] <- paste0(str_sub(local_backup[row-1], end = i+1-l),
paste(rep(".", 1), collapse = ""),
str_sub(local_backup[row-1], start = i+3-l))
}
}
#Move to next row observations
for (j in 1:5) {
test <- str_sub(local_backup[row+1], start = i+2-j, end = i+4-j)
if (grepl("[0-9]{3}", test)) {
part_numbers <- c(part_numbers, test)
local_backup[row+1] <- paste0(str_sub(local_backup[row+1], end = i+1-j),
paste(rep(".", 3), collapse = ""),
str_sub(local_backup[row+1], start = i+5-j))
}
}
for (k in 1:4) {
test <- str_sub(local_backup[row+1], start = i+2-k, end = i+3-k)
if (grepl("[0-9]{2}", test)) {
part_numbers <- c(part_numbers, test)
local_backup[row+1] <- paste0(str_sub(local_backup[row+1], end = i+1-k),
paste(rep(".", 2), collapse = ""),
str_sub(local_backup[row+1], start = i+4-k))
}
}
for (l in 1:3) {
test <- str_sub(local_backup[row+1], start = i+2-l, end = i+2-l)
if (grepl("[0-9]{1}", test)) {
part_numbers <- c(part_numbers, test)
local_backup[row+1] <- paste0(str_sub(local_backup[row+1], end = i+1-l),
paste(rep(".", 1), collapse = ""),
str_sub(local_backup[row+1], start = i+3-l))
}
}
}
}
}
part_numbers
length(part_numbers)
part_numbers |>
unlist() |>
as.integer() |>
sum()
