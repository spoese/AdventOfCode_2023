for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
seed_map
location_backup(1900000)
location_back(1900000)
location_back(1928058)
debug(location_back)
location_back(1928058)
length(map_list[[j]]$Source)
map_list[[j]]$Dest[[i]]
map_list[[j]]$Max_Dest[[i]]
map_list[[j]]
View(.Last.value)
map_list[[j]]$Dest[[i]]
output
output
output
location_back <- function(output) {
for (j in 7:1) {
for (i in 1:length(map_list[[j]]$Source)) {
if (output >= map_list[[j]]$Dest[[i]] & output <= map_list[[j]]$Max_Dest[i]) {
output <- output - map_list[[j]]$Operation[i]
break
}
}
}
output
}
tictoc::tic()
end <- FALSE
for(l in 1900000:2000000) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
location_backup(1900000)
location_back(1928058)
seed_map
seed_map$Starts[1]
for(l in 1900000:2000000) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & output <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
answer
k
answer >= seed_map$Starts[k]
tictoc::tic()
end <- FALSE
for(l in 1900000:2000000) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & answer <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
tictoc::toc()
1928058-1900000
=28058/9.9
2805/9.9
1928058/283.3333*9.9
67368.62/60
1122.81/60
location_back <- function(seed, num) {
mapping <- map_list[[num]] |>
filter(seed >= Dest,
seed <= Max_Dest)
if (dim(mapping)[1] == 0) {
seed
} else {
seed - mapping$Operation
}
}
single_back <- function(seed, num) {
mapping <- map_list[[num]] |>
filter(seed >= Dest,
seed <= Max_Dest)
if (dim(mapping)[1] == 0) {
seed
} else {
seed - mapping$Operation
}
}
location_back <- function(seed) {
output <- seed
for (i in 7:1) {
output <- single_back(output, i)
}
output
}
location_back(0)
ss_function(location_back(0))
ss_function(location_back(0), 1)
ss_function(location_back(0), 1) |> ss_function(2)
ss_function(location_back(0), 1) |> ss_function(2) |> ss_function(3) |> ss_function(4) |> ss_function(5) |> ss_function(6) |> ss_function(7)
tictoc::tic()
end <- FALSE
for(l in 1900000:2000000) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & answer <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
tictoc::tic()
end <- FALSE
for(l in 1900000:1928058) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & answer <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
location_back(1900000)
tictoc::tic()
end <- FALSE
for(l in 1900000:1900100) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & answer <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
tictoc::toc()
tictoc::tic()
end <- FALSE
for(l in 1928050:1928060) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & answer <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
tictoc::toc()
tictoc::tic()
end <- FALSE
for(l in 1927058:1928058) {
answer <- location_back(l)
for (k in 1:10) {
if (answer >= seed_map$Starts[k] & answer <= seed_map$Ends[k]) {
end <- TRUE
break
}
}
if (end) {
print(paste0("Solution found on iteration ", l))
break
}
}
tictoc::toc()
1928058/1000
1928.058*5.44
10488.64/60
174.8107/60
5*1000
5000/60
setwd("~/R/AdventOfCode_2023/Day 6")
data_backup <- tibble(Time = c(53, 91, 67, 68),
Distance = c(250, 1330, 1081, 1025))
data_backup
race1 <- tibble(Hold = 0:data$Time[1],
Distance = Hold*(Time[1]-Hold))
race1
race1 <- tibble(Hold = 0:data$Time[1]) |>
mutate(Distance = Hold*(Time[1]-Hold))
race1 <- tibble(Hold = 0:data_backup$Time[1]) |>
mutate(Distance = Hold*(Time[1]-Hold))
race1 <- tibble(Hold = 0:data_backup$Time[1]) |>
mutate(Distance = Hold*(data_backup$Time[1]-Hold))
race1
ways <- NULL
for (i in 1:4){
temp <- tibble(Hold = 0:data_backup$Time[i]) |>
mutate(Distance = Hold*(data_backup$Time[i]-Hold)) |>
filter(Distance > data_backup$Distance[i]) |>
pull(Hold) |>
length()
wyas <- c(ways, temp)
}
ways
temp <- tibble(Hold = 0:data_backup$Time[i]) |>
mutate(Distance = Hold*(data_backup$Time[i]-Hold)) |>
filter(Distance > data_backup$Distance[i]) |>
pull(Hold) |>
length()
temp
ways <- NULL
for (i in 1:4){
temp <- tibble(Hold = 0:data_backup$Time[i]) |>
mutate(Distance = Hold*(data_backup$Time[i]-Hold)) |>
filter(Distance > data_backup$Distance[i]) |>
pull(Hold) |>
length()
ways <- c(ways, temp)
}
ways
prod(ways)
paste(data_backup$Time, collapse = "")
tibble(Hold = 0:paste(data_backup$Time, collapse = "")) |>
mutate(Distance = Hold*(paste(data_backup$Time, collapse = "")-Hold)) |>
filter(Distance > paste(data_backup$Distance, collapse = "")) |>
pull(Hold) |>
length()
tibble(Hold = 0:as.integer(paste(data_backup$Time, collapse = ""))) |>
mutate(Distance = Hold*(as.integer(paste(data_backup$Time, collapse = ""))-Hold)) |>
filter(Distance > as.integer(paste(data_backup$Distance, collapse = ""))) |>
pull(Hold) |>
length()
as.integer(paste(data_backup$Distance, collapse = ""))
250133010811025
tibble(Hold = 0:as.numeric(paste(data_backup$Time, collapse = ""))) |>
mutate(Distance = Hold*(as.numeric(paste(data_backup$Time, collapse = ""))-Hold)) |>
filter(Distance > as.numeric(paste(data_backup$Distance, collapse = ""))) |>
pull(Hold) |>
length()
setwd("~/R/AdventOfCode_2023/Day 7")
library(tidyverse)
?lag
stats <- tibble(PartB = c(205876, 173146, 114224, 113115, 68811, 87649, 68476,
60891, 61120, 36451, 41710),
PartAOnly = c(65363, 7901, 16994, 15101, 26628, 1418, 6027,
12082, 862, 14165, 1944, 12941))
stats <- tibble(PartB = c(205876, 173146, 114224, 113115, 68811, 87649, 68476,
60891, 61120, 36451, 41710),
PartAOnly = c(65363, 7901, 16994, 15101, 26628, 1418, 6027,
12082, 862, 14165, 1944))
stats
stats |>
rowwise() |>
mutate(PartA = sum(PartB:PartAOnly))
stats |>
rowwise() |>
mutate(PartA = sum(PartB,PartAOnly))
stats <- tibble(PartB = c(205876, 173146, 114224, 113115, 68811, 87649, 68476,
60891, 61120, 36451, 41710),
PartAOnly = c(65363, 7901, 16994, 15101, 26628, 1418, 6027,
12082, 862, 14165, 1944)) |>
rowwise() |>
mutate(PartA = sum(PartB,PartAOnly)) |>
select(PartA, PartB)
stats
stats <- tibble(PartB = c(205876, 173146, 114224, 113115, 68811, 87649, 68476,
60891, 61120, 36451, 41710),
PartAOnly = c(65363, 7901, 16994, 15101, 26628, 1418, 6027,
12082, 862, 14165, 1944)) |>
rowwise() |>
mutate(PartA = sum(PartB,PartAOnly),
PrevA = lag(PartA),
PrevB = lag(PartB)) |>
select(PartA, PartB, PrevA, PrevB)
stats
stats <- tibble(Day = 1:11,
PartB = c(205876, 173146, 114224, 113115, 68811, 87649, 68476,
60891, 61120, 36451, 41710),
PartAOnly = c(65363, 7901, 16994, 15101, 26628, 1418, 6027,
12082, 862, 14165, 1944)) |>
rowwise() |>
mutate(PartA = sum(PartB,PartAOnly),
PrevA = lag(PartA, order_by = Day),
PrevB = lag(PartB, order_by = Day)) |>
select(PartA, PartB, PrevA, PrevB)
stats
tibble(Day = 1:11,
PartB = c(205876, 173146, 114224, 113115, 68811, 87649, 68476,
60891, 61120, 36451, 41710),
PartAOnly = c(65363, 7901, 16994, 15101, 26628, 1418, 6027,
12082, 862, 14165, 1944)) |>
rowwise() |>
mutate(PartA = sum(PartB,PartAOnly),
PrevA = lag(PartA, order_by = Day),
PrevB = lag(PartB, order_by = Day)) |>
select(Day, PartA, PartB, PrevA, PrevB)
scrambled <- slice_sample(
tibble(year = 2000:2005, value = (0:5) ^ 2),
prop = 1
)
tibble(Day = 1:11,
PartB = c(205876, 173146, 114224, 113115, 68811, 87649, 68476,
60891, 61120, 36451, 41710),
PartAOnly = c(65363, 7901, 16994, 15101, 26628, 1418, 6027,
12082, 862, 14165, 1944)) |>
rowwise() |>
mutate(PartA = sum(PartB,PartAOnly),
PrevA = lag(PartA, order_by = Day),
PrevB = lag(PartB, order_by = Day)) |>
select(Day, PartA, PartB, PrevA, PrevB)
scrambled <- slice_sample(
tibble(year = 2000:2005, value = (0:5) ^ 2),
prop = 1
)
scrambled
wrong <- mutate(scrambled, previous_year_value = lag(value))
arrange(wrong, year)
right <- mutate(scrambled, previous_year_value = lag(value, order_by = year))
arrange(right, year)
tibble(Day = 1:11,
PartB = c(205876, 173146, 114224, 113115, 68811, 87649, 68476,
60891, 61120, 36451, 41710),
PartAOnly = c(65363, 7901, 16994, 15101, 26628, 1418, 6027,
12082, 862, 14165, 1944)) |>
rowwise() |>
mutate(PartA = sum(PartB,PartAOnly)) |>
mutate(PrevA = lag(PartA, order_by = Day),
PrevB = lag(PartB, order_by = Day)) |>
select(Day, PartA, PartB, PrevA, PrevB)
stats <- tibble(Day = 1:11,
PartB = c(205876, 173146, 114224, 113115, 68811, 87649, 68476,
60891, 61120, 36451, 41710),
PartAOnly = c(65363, 7901, 16994, 15101, 26628, 1418, 6027,
12082, 862, 14165, 1944)) |>
rowwise() |>
mutate(PartA = sum(PartB,PartAOnly))
stats
stats |>
mutate(PrevA = lag(PartA, order_by = Day),
PrevB = lag(PartB, order_by = Day)) |>
select(Day, PartA, PartB, PrevA, PrevB)
lag(stats, PartA, order_by = day)
lag(stats$PartA, order_by = day)
lag(stats$PartA, order_by = stats$day)
stats |>
mutate(PrevA = lag(stats$PartA, order_by = stats$Day),
PrevB = lag(stats$PartB, order_by = stats$Day)) |>
select(Day, PartA, PartB, PrevA, PrevB)
stats |>
bind_cols(PrevA = lag(stats$PartA, order_by = stats$Day),
PrevB = lag(stats$PartB, order_by = stats$Day)) |>
select(Day, PartA, PartB, PrevA, PrevB)
stats <- tibble(Day = 1:11,
PartB = c(205876, 173146, 114224, 113115, 68811, 87649, 68476,
60891, 61120, 36451, 41710),
PartAOnly = c(65363, 7901, 16994, 15101, 26628, 1418, 6027,
12082, 862, 14165, 1944)) |>
rowwise() |>
mutate(PartA = sum(PartB,PartAOnly)) |>
bind_cols(PrevA = lag(stats$PartA, order_by = stats$Day),
PrevB = lag(stats$PartB, order_by = stats$Day)) |>
select(Day, PartA, PartB, PrevA, PrevB)
stats
lm(PartA ~ Day + PrevA + PrevB, data = stats) |>
broom::tidy()
lm(PartB ~ Day + PartA + PrevA + PrevB, data = stats) |>
broom::tidy()
lm(PartB ~ PartA, data = stats) |>
broom::tidy()
lm(PartB ~ PartA + PrevA, data = stats) |>
broom::tidy()
lm(PartA ~ Day + PrevA + PrevB, data = stats) |>
broom::tidy()
lm(PartA ~ Day + PrevA, data = stats) |>
broom::tidy()
PartA_model <- lm(PartA ~ Day + PrevA, data = stats) |>
broom::tidy()
PartA_model <- lm(PartA ~ Day + PrevA, data = stats)
PartB_model <- lm(PartB ~ PartA, data = stats) |>
broom::tidy()
PartB_model <- lm(PartB ~ PartA, data = stats)
?pred
??pred
?predict
predict(PartA_model, stats |>
select(Day, PrevA))
mutate(Diff = Predictions - Original)
tibble(Original = stats$PartA,
Predictions = predict(PartA_model,
stats |>
select(Day, PrevA))
parta_comp <- tibble(Original = stats$PartA,
parta_comp
parta_comp <- tibble(Original = stats$PartA,
Predictions = predict(PartA_model,
stats |>
select(Day, PrevA))) |>
mutate(Diff = Predictions - Original)
parta_comp
parta_comp <- tibble(Original = stats$PartA,
Predictions = predict(PartA_model,
stats |>
select(Day, PrevA))) |>
mutate(Diff = Original - Predictions)
parta_comp
parta_comp <- tibble(Original = stats$PartA,
Predictions = predict(PartA_model,
stats |>
select(Day, PrevA))) |>
mutate(Diff = (Original - Predictions)/Predictions)
parta_comp
parta_comp <- tibble(Original = stats$PartA,
Predictions = predict(PartA_model,
stats |>
select(Day, PrevA))) |>
mutate(Diff = (Original - Predictions)/Predictions) |>
arrange(Diff)
parta_comp
parta_comp <- tibble(Day = 1:11,
Original = stats$PartA,
Predictions = predict(PartA_model,
stats |>
select(Day, PrevA))) |>
mutate(Diff = (Original - Predictions)/Predictions) |>
arrange(Diff)
parta_comp
partb_comp <- tibble(Day = 1:11,
Original = stats$PartB,
Predictions = predict(PartB_model,
parta_comp |>
arrange(Day) |>
pull(Predictions))) |>
mutate(Diff = (Original - Predictions)/Predictions) |>
arrange(Diff)
partb_comp <- tibble(Day = 1:11,
Original = stats$PartB,
Predictions = predict(PartB_model,
parta_comp |>
arrange(Day) |>
select(Predictions))) |>
mutate(Diff = (Original - Predictions)/Predictions) |>
arrange(Diff)
partb_comp <- tibble(Day = 1:11,
Original = stats$PartB,
Predictions = predict(PartB_model,
parta_comp |>
arrange(Day) |>
select(Predictions) |>
rename("PartA" = "Predictions"))) |>
mutate(Diff = (Original - Predictions)/Predictions) |>
arrange(Diff)
parta_comp
partb_comp
data_backup <- readxl::read_excel("Data.xlsx", col_names = False) |>
rename("Data" = "...1")
data_backup <- readxl::read_excel("Data.xlsx", col_names = FALSE) |>
rename("Data" = "...1")
data_backup
data_backup <- readxl::read_excel("Data.xlsx", col_names = FALSE) |>
rename("Data" = "...1") |>
mutate(Hand = str_split(data_backup$Data, " ")[1],
Bid = str_split(data_backup$Data, " ")[2])
data_backup
data_backup <- readxl::read_excel("Data.xlsx", col_names = FALSE) |>
rename("Data" = "...1") |>
mutate(Hand = str_split(Data, " ")[1],
Bid = str_split(Data, " ")[2])
data_backup
data_backup$Hand[1]
?str_split
data_backup <- readxl::read_excel("Data.xlsx", col_names = FALSE) |>
rename("Data" = "...1") |>
mutate(Hand = str_split(Data, " ", simplify = TRUE)[1],
Bid = str_split(Data, " ", simplify = TRUE)[2])
data_backup
data_backup <- readxl::read_excel("Data.xlsx", col_names = FALSE) |>
rename("Data" = "...1") |>
rowwise() |>
mutate(Hand = str_split(Data, " ", simplify = TRUE)[1],
Bid = str_split(Data, " ", simplify = TRUE)[2])
data_backup
